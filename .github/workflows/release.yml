name: Release Build
on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release: input "y" to ignore.'
        required: false
  push:
    tags:
      - "v*"
jobs:
  libcore:
    name: Native Build (LibCore)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Golang Status
        run: find buildScript libcore/*.sh | xargs cat | sha1sum > golang_status
      - name: Libcore Status
        run: git ls-files libcore | xargs cat | sha1sum > libcore_status
      - name: LibCore Cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            app/libs/libcore.aar
          key: ${{ hashFiles('.github/workflows/*', 'golang_status', 'libcore_status') }}
      - name: Golang Version
        if: steps.cache.outputs.cache-hit != 'true'
        id: version
        run: |
          source buildScript/init/version.sh
          echo go_version=$GO_VERSION >> $GITHUB_OUTPUT
      - name: Install Golang
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.version.outputs.go_version }}
          cache-dependency-path: libcore/go.sum
      - uses: actions/setup-java@v4
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: "21"
          distribution: "temurin"
      - name: Setup Android NDK
        if: steps.cache.outputs.cache-hit != 'true'
        # Pin NDK version for `gomobile`.
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          add-to-path: true
          ndk-version: r28c
          local-cache: false
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          ./run lib core
      - name: Upload libcore
        uses: actions/upload-artifact@v4
        with:
          path: app/libs/libcore.aar
          name: "libcore"
  build:
    name: Build FOSS APK
    runs-on: ubuntu-latest
    needs:
      - libcore
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: LibCore Artifact
        uses: actions/download-artifact@v5
        with:
          name: "libcore"
          path: app/libs/libcore.aar
      - uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
      - name: Golang Version
        if: steps.cache.outputs.cache-hit != 'true'
        id: version
        run: |
          source buildScript/init/version.sh
          echo go_version=$GO_VERSION >> $GITHUB_OUTPUT
      - name: Install Golang
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.version.outputs.go_version }}
          cache-dependency-path: libcore/go.sum
      - uses: gradle/actions/setup-gradle@v4
      - name: Gradle Build
        env:
          BUILD_PLUGIN: none
        run: |
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "${{ secrets.LOCAL_PROPERTIES }}" >> local.properties
          ./run init action gradle
          ./gradlew clean app:assembleFossRelease
          APK=$(find app/build/outputs/apk -name '*arm64-v8a*.apk')
          APK=$(dirname $APK)
          rm $APK/output-metadata.json
          echo "APK=$APK" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v4
        with:
          name: APKs
          path: ${{ env.APK }}
  release:
    name: Publish Release
    if: github.event.inputs.release != 'y'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          name: APKs
          path: artifacts/
      - name: Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir apks
          find artifacts -name "*.apk" -exec cp {} apks \;
          gh release create "${{ github.ref_name }}" --title "${{ github.ref_name }}" --prerelease ./apks/*           --notes "# :memo: Release Notes\r\n\r\n* Fixes and improvements."
